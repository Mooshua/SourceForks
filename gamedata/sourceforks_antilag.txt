"Games"
{
	"csgo"
	{
		"Keys"
		{
			//	How big the call instruction is
			"CorruptedPacketSize"
			{
				"windows" 	"6"
				"linux" 	"5"
			}

			"InvalidReliableStateSize"
			{
				"windows" 	"11"
				"linux" 	"10"
			}

			"RatelimiterSize"
			{
				"windows" 	"6"
				"linux" 	"5"
			}

			"TeleportNoDestinationSize"
			{
				"windows"	"6"
				"linux"		"5"
			}
			"TeleportNoClearDestinationSize"
			{
				"windows"	"6"
				"linux"		"5"
			}
		}
		"Functions"
		{
			//	Hook to detect cheaters attempting to lag the server.

			//	!!! THIS DOESN'T WORK !!!
			//	!!! THIS DOESN'T WORK !!!
			//	I don't know why but I have to hardcode it in the .sp file.
			//	TODO: find out why :(
			"Detour_InvalidReliableState"
			{
				"this"		"ignore"
				"hooktype"	"raw"
				"address" "InvalidReliableState"
				"return" "void"
				"callconv"	"cdecl"

				"arguments"
				{
					//	by some miracle eax holds the desired arg on all platforms.
					//	not sure how long that's going to last...
					//	First vararg to ConMsg("%s:reliable state invalid (%i).\n", ...)
					//	(Second arg overall)
					"ip"
					{
						"size"		"-1"
						"type" 		"charptr"
						"flags"		"byval"
						"register" 	"eax"
					}
				}
			}
		}
		"Addresses"
		{
			"CorruptedPacket"
			{
				//	Offset into ProcessPacketHeader
				//	Look for "%s:corrupted packet %i at %i\n"
				//	Then look for the ConMsg call that consumes that.
				//	We are overwriting the ConMsg call.

				"signature" "ProcessPacketHeader"

				"windows"
				{
					"offset" "1045"
				}
				"linux"
				{
					"offset" "1095"
				}
			}
			"InvalidReliableState"
			{
				//	Offset into ProcessPacketHeader
				//	Look for "%s:reliable state invalid (%i).\n"
				//	We are overwriting the call that consumes that string.
				"signature" "ProcessPacketHeader"

				"windows"
				{
					"offset" "2317"
				}
				"linux"
				{
					"offset" "2432"
				}
			}
			"Ratelimiter"
			{
				//	Offset into unknown subroutine
				//	Look for the ConMsg call that consumes "Net channel ratelimit exceeded for %s:".
				//	We are overwriting that call.
				"signature" "Ratelimiter"

				"windows"
				{
					"offset" "72"
				}
				"linux"
				{
					"offset" "42"
				}
			}
			"TeleportNoDestination"
			{
				"signature"	"CTeleportTrigger::Touch"
				//	We are looking for the call to "Warning" with the string ..."cannot find teleport destination named"...
				"windows"
				{
					"offset"	"162"
				}
				"linux"
				{
					"offset"	"378"
				}
			}
			"TeleportNoClearDestination"
			{
				"signature"	"CTeleportTrigger::Touch"
				//	We are looking for the call to "Warning" with the string ..."cannot find a clear player position"...
				"windows"
				{
					"offset"	"326"
				}
				"linux"
				{
					"offset"	"276"
				}
			}

			"Original::ProcessPacketHeader"
			{
				"signature"		"ProcessPacketHeader"
			}
		}
		"Signatures"
		{
			"ProcessPacketHeader"
			{
				//	"%s:reliable state invalid (%i).\n"
				"library"	"engine"
				"windows"	"\x55\x8b\xEC\x83\xEC\x18\x53\x56\x8B\x75\x08\xBA"
				"linux"		"\x55\x89\xE5\x57\x56\x53\x83\xEC\x3C\x8B\x7D\x0C\x8B\x47\x44"
			}
			"Ratelimiter"
			{
				//	"Net channel ratelimit exceeded for %s:"
				"library"	"engine"
				"windows"	"\x83\x3D\x2A\x2A\x2A\x2A\x00\x7E\x70\xA1\x2A\x2A\x2A\x2A\x8B\xC8"
				"linux" 	"\x55\x89\xE5\x53\x83\xEC\x04\x8B\x1D\x2A\x2A\x2A\x2A\x85\xDB\x7E\x2A"
			}
			"CTeleportTrigger::Touch"
            {
                //  "Teleport trigger '%s' cannot find destination named '%s'!\n"
                //  "Teleport trigger '%s' cannot find a clear player position\n"
                "library"   "server"
                "windows"   "\x55\x8B\xEC\x83\xE4\xF0\x81\xEC\x08\x01\x00\x00\x56\x8B\xF1"
                "linux"     "\x55\x89\xE5\x57\x56\x53\x81\xEC\x24\x01\x00\x00\x8B\x5D\x08\x8B\x7D\x0C\x8B\x03\x57"
            }
		}
	}
}